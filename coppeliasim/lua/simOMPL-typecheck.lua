-- simOMPL lua type-checking wrapper
-- (this file is automatically generated: do not edit)
require 'checkargs'

local simOMPL=require('simOMPL')

function simOMPL.__addTypeCheck()
    local function wrapFunc(funcName,wrapperGenerator)
        _G['simOMPL'][funcName]=wrapperGenerator(_G['simOMPL'][funcName])
    end

    wrapFunc('setGoalStates',function(origFunc)
        return function(...)
            local taskHandle,states=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',size='1..*'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,states)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('getPathStateCount',function(origFunc)
        return function(...)
            local taskHandle,path=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',item_type='float'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,path)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('getPathState',function(origFunc)
        return function(...)
            local taskHandle,path,index=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',item_type='float'},
                    {type='int'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,path,index)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('getProjectedPathLength',function(origFunc)
        return function(...)
            local taskHandle,path=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',item_type='float'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,path)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('getReversedPath',function(origFunc)
        return function(...)
            local taskHandle,path=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',item_type='float'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,path)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('projectionSize',function(origFunc)
        return function(...)
            local taskHandle=checkargsEx(
                {level=1},
                {
                    {type='string'},
                },
                ...
            )
            local _rets={origFunc(taskHandle)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('drawPath',function(origFunc)
        return function(...)
            local taskHandle,path,lineSize,color,extraAttributes=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',item_type='float'},
                    {type='float'},
                    {type='table',item_type='float',size='3'},
                    {type='int'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,path,lineSize,color,extraAttributes)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('drawPlannerData',function(origFunc)
        return function(...)
            local taskHandle,pointSize,lineSize,color,startColor,goalColor=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='float'},
                    {type='float'},
                    {type='table',item_type='float',size='3'},
                    {type='table',item_type='float',size='3'},
                    {type='table',item_type='float',size='3'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,pointSize,lineSize,color,startColor,goalColor)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('removeDrawingObjects',function(origFunc)
        return function(...)
            local taskHandle,dwos=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',item_type='int'},
                },
                ...
            )
            local _rets={origFunc(taskHandle,dwos)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('createStateSpaceForJoint',function(origFunc)
        return function(...)
            local name,jointHandle,useForProjection,weight=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='int'},
                    {type='int',default=0},
                    {type='float',default=1},
                },
                ...
            )
            local _rets={origFunc(name,jointHandle,useForProjection,weight)}
            return table.unpack(_rets)
        end
    end)

    wrapFunc('setStateSpaceForJoints',function(origFunc)
        return function(...)
            local taskHandle,jointHandles,useForProjection,weight=checkargsEx(
                {level=1},
                {
                    {type='string'},
                    {type='table',item_type='int'},
                    {type='table',item_type='int',default={}},
                    {type='table',item_type='float',default={}},
                },
                ...
            )
            local _rets={origFunc(taskHandle,jointHandles,useForProjection,weight)}
            return table.unpack(_rets)
        end
    end)

    simOMPL.__addTypeCheck=nil
end

sim.registerScriptFuncHook('sysCall_init','simOMPL.__addTypeCheck',true)

return simOMPL
